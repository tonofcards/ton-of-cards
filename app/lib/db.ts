'use server';
import { sql } from '@vercel/postgres';
export type Card={id:string;created_at:string;player:string;sport:'basketball'|'football';year:number|null;brand:string|null;set_name:string|null;card_number:string|null;parallel:string|null;serial_numbered:string|null;grade:string|null;purchase_price:number|null;list_price:number|null;market_value:number|null;status:'inventory'|'listed'|'sold';image_url:string|null;};
export async function initDB(){await sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`;await sql`CREATE TABLE IF NOT EXISTS cards(id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),created_at TIMESTAMPTZ NOT NULL DEFAULT now(),player TEXT NOT NULL,sport TEXT NOT NULL CHECK (sport IN ('basketball','football')),year INT,brand TEXT,set_name TEXT,card_number TEXT,parallel TEXT,serial_numbered TEXT,grade TEXT,purchase_price NUMERIC,list_price NUMERIC,market_value NUMERIC,status TEXT NOT NULL DEFAULT 'inventory' CHECK (status IN ('inventory','listed','sold')),image_url TEXT);`;await sql`ALTER TABLE cards ADD COLUMN IF NOT EXISTS market_value NUMERIC;`;}
export async function createCard(data:Omit<Card,'id'|'created_at'>){await initDB();const res=await sql<Card>`INSERT INTO cards(player,sport,year,brand,set_name,card_number,parallel,serial_numbered,grade,purchase_price,list_price,market_value,status,image_url)VALUES(${data.player},${data.sport},${data.year},${data.brand},${data.set_name},${data.card_number},${data.parallel},${data.serial_numbered},${data.grade},${data.purchase_price},${data.list_price},${data.market_value},${data.status},${data.image_url}) RETURNING *;`;return res.rows[0];}
export async function listCards(){await initDB();const res=await sql<Card>`SELECT * FROM cards ORDER BY created_at DESC;`;return res.rows;}
export async function getCard(id:string){const res=await sql<Card>`SELECT * FROM cards WHERE id = ${id} LIMIT 1;`;return res.rows[0]??null;}
export async function updateCard(id:string,fields:Partial<Card>){const entries=Object.entries(fields).filter(([_,v])=>v!==undefined);if(entries.length===0)return getCard(id);const setFragments=entries.map(([k],i)=>`${k} = $${i+2}`).join(', ');const values=entries.map(([_,v])=>v);const text=`UPDATE cards SET ${setFragments} WHERE id = $1 RETURNING *;`;const res=await sql.query<Card>(text,[id,...values]);return res.rows[0];}
export async function deleteCard(id:string){await sql`DELETE FROM cards WHERE id = ${id};`;}
